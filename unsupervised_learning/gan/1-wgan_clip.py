#!/usr/bin/env python3
"""WGAN implementation using TensorFlow/Keras"""

import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt


class WGAN_clip(keras.Model):
    """
    Wasserstein GAN with weight clipping (WGAN_clip).
    Implements the WGAN training process with:
        - Clipping the discriminator's weights within [-1, 1].
        - Training the discriminator multiple times per generator step.

    Attributes:
        generator (tf.keras.Model): The generator network.
        discriminator (tf.keras.Model): The discriminator network.
        latent_generator (function): Function to generate latent vectors.
        real_examples (tf.Tensor): Tensor of real examples for training.
        batch_size (int): Batch size for training.
        disc_iter (int): Number of discriminator updates per
        generator step.
        learning_rate (float): Learning rate for both generator
        and discriminator.
        beta_1 (float): Beta_1 parameter for Adam optimizer.
        beta_2 (float): Beta_2 parameter for Adam optimizer.
    """
    def __init__(self, generator, discriminator,
                 latent_generator, real_examples,
                 batch_size=200, disc_iter=2, learning_rate=.005):
        """
        Initializes the WGAN_clip model.

        Args:
            generator (tf.keras.Model): Generator network.
            discriminator (tf.keras.Model): Discriminator network.
            latent_generator (function): Function to generate latent vectors.
            real_examples (tf.Tensor): Tensor of real training examples.
            batch_size (int, optional): Batch size. Defaults to 200.
            disc_iter (int, optional): Number of discriminator iterations.
            Defaults to 2.
            learning_rate (float, optional): Learning rate for optimizers.
            Defaults to 0.005.
        """
        super().__init__()
        self.latent_generator = latent_generator
        self.real_examples = real_examples
        self.generator = generator
        self.discriminator = discriminator
        self.batch_size = batch_size
        self.disc_iter = disc_iter

        self.learning_rate = learning_rate
        self.beta_1 = .5
        self.beta_2 = .9

        # define the generator loss and optimizer:
        self.generator.loss = lambda x: -tf.reduce_mean(x)
        self.generator.optimizer = keras.optimizers.Adam(
            learning_rate=self.learning_rate,
            beta_1=self.beta_1, beta_2=self.beta_2)
        self.generator.compile(
            optimizer=generator.optimizer, loss=generator.loss)

        # define the discriminator loss and optimizer:
        self.discriminator.loss = lambda x, y: (
            tf.reduce_mean(y) - tf.reduce_mean(x))
        self.discriminator.optimizer = keras.optimizers.Adam(
            learning_rate=self.learning_rate,
            beta_1=self.beta_1, beta_2=self.beta_2)
        self.discriminator.compile(
            optimizer=discriminator.optimizer,
            loss=discriminator.loss)

    # generator of real samples of size batch_size
    def get_fake_sample(self, size=None, training=False):
        """
        Generates a batch of fake samples using the generator.

        Args:
            size (int, optional): Number of samples to generate
            Defaults to batch_size.
            training (bool, optional): Whether the model is in training
            mode. Defaults to False.

        Returns:
            tf.Tensor: Fake samples generated by the generator.
        """
        if not size:
            size = self.batch_size
        return self.generator(
            self.latent_generator(size), training=training)

    # generator of fake samples of size batch_size
    def get_real_sample(self, size=None):
        """
        Retrieves a batch of real samples from the dataset.

        Args:
            size (int, optional): Number of real samples to retrieve
            Defaults to batch_size.

        Returns:
            tf.Tensor: Randomly selected real samples.
        """
        if not size:
            size = self.batch_size
        sorted_indices = tf.range(tf.shape(self.real_examples)[0])
        random_indices = tf.random.shuffle(sorted_indices)[:size]
        return tf.gather(self.real_examples, random_indices)

    # overloading train_step()
    def train_step(self, useless_argument):
        """
        Performs one training step for the WGAN.

        This includes:
            - Training the discriminator `disc_iter` times.
            - Clipping the discriminator's weights to [-1, 1].
            - Training the generator once.

        Args:
            useless_argument: Unused argument required for
            method overriding.

        Returns:
            dict: Dictionary containing the losses for discriminator
            and generator.
        """
        for _ in range(self.disc_iter):
            with tf.GradientTape() as tape:
                real_samples = self.get_real_sample()
                fake_samples = self.get_fake_sample(training=True)

                # Compute discriminator loss
                real_preds = self.discriminator(real_samples, training=True)
                fake_preds = self.discriminator(fake_samples, training=True)
                discr_loss = self.discriminator.loss(real_preds, fake_preds)

            # Update discriminator weights
            grads = tape.gradient(
                discr_loss, self.discriminator.trainable_variables)
            self.discriminator.optimizer.apply_gradients(
                zip(grads, self.discriminator.trainable_variables))

            # Clip the weights of the discriminator to [-1, 1]
            for var in self.discriminator.trainable_variables:
                var.assign(tf.clip_by_value(var, -1.0, 1.0))

        # Train the generator
        with tf.GradientTape() as tape:
            # Generate fake samples
            fake_samples = self.get_fake_sample(training=True)
            fake_preds = self.discriminator(fake_samples, training=False)

            # Compute generator loss
            gen_loss = self.generator.loss(fake_preds)

        # Update generator weights
        grads = tape.gradient(gen_loss, self.generator.trainable_variables)
        self.generator.optimizer.apply_gradients(
            zip(grads, self.generator.trainable_variables))

        return {"discr_loss": discr_loss, "gen_loss": gen_loss}
